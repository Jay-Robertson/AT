@model Mavo.Assets.Models.ViewModel.EditJobPostModel
@{
    if (Model != null)
    {
        ViewBag.Title = "Edit :: " + Model.Name;
    }
    else
    {
        ViewBag.Title = "Create :: Job";
    }
}

@section LeftNav
{
    @{Html.RenderPartial(MVC.Job.Views._JobSidebar, new Mavo.Assets.Models.ViewModel.SearchResult());}
}
@section scripts
{

    <script type="text/javascript">
        jQuery(function ($) {
            $('#job-tabs').tab();
        });
        @if (Model.Status == Mavo.Assets.Models.JobStatus.BeingPicked)
        {
            <text>
        $('#btnCancelPick').click(function ()
        {
            $.post('/jobpicker/cancel/@Model.Id', function (status) {
                $('.alert-info').hide();
                $('#status').html(status);
            });
        });
            </text>
        }
        @if (Model.Status == Mavo.Assets.Models.JobStatus.BeingReturned)
        {
            <text>
        $('#btnCancelReturn').click(function () {
            $.post('/jobreturner/cancel/@Model.Id', function (status) {
                $('.alert-info').hide();
                $('#status').html(status);
            });
        });
            </text>
        }
    </script>

}

@if (null != Model)
{
    Html.RenderPartial("_PickJobModal", new Mavo.Assets.Models.Job() { Id = Model.Id.Value, PickupTime = Model.PickupTime, Name = Model.Name });
}
<h1>
    <span>@ViewBag.Action Job</span>
    @if (null != Model)
    {
        <span>&gt; @Model.Name</span>
        if (Model.Status == Mavo.Assets.Models.JobStatus.New)
        {
        <a data-toggle="modal" href="#pickupModal@(Model.Id.Value)" class="pull-right btn btn-primary btn-large"><i class="icon-lock icon-white"></i>&nbsp;Ready to pick</a>
        }
    }

</h1>
@if (Model.Status == Mavo.Assets.Models.JobStatus.BeingPicked)
{
    <div class="alert alert-info">
        <p>
            <strong>Job is being picked!</strong> This job is <a href="/jobpicker/index/@Model.Id">currently being picked</a> by <strong>@Model.PickedUpByStr</strong>.  They started picking it up at <strong>@Model.PickStarted</strong>
        </p>
        <button type="button" id="btnCancelPick" class="btn btn-danger">Cancel</button>
    </div>
}
@if (Model.Status == Mavo.Assets.Models.JobStatus.BeingReturned)
{
    <div class="alert alert-info">
        <p><strong>Job is being returned!</strong> This job is <a href="/jobreturner/index/@Model.Id">currently being returned</a> by <strong>@Model.ReturnedByStr</strong>.  They started returning it at <strong>@Model.ReturnStarted</strong></p>
        <button type="button" id="btnCancelReturn" class="btn btn-danger">Cancel</button>
    </div>
}
@if (null != Model)
{
    <ul id="job-tabs" class="nav nav-tabs">
        <li><a href="#details" data-toggle="tab">Details</a></li>
        <li class="active"><a href="#assets" data-toggle="tab">Assets</a></li>
    </ul>
}

@using (Html.BeginForm(MVC.Job.Edit(), FormMethod.Post, new { @class = "form-horizontal" }))
{
    @Html.HiddenFor(x => x.Id)
    @Html.HiddenFor(x => x.Status)
   
    if (Model == null)
    {
    <div class="row-fluid">
        <div class="well">
            <h4>Template</h4>
            @Html.DropDownList("TemplateId", ((IList<Mavo.Assets.Models.Template>)ViewBag.Templates).Select(x => new SelectListItem()
       {
           Value = x.Id.ToString(),
           Text = x.Name,
           Selected = Model == null || ViewBag.TemplateId.HasValue ? false : x.Id == ViewBag.TemplateId
       }), string.Empty)
        </div>
    </div>
    }

    <div class="tab-content">
        <div class="tab-pane @(null == Model ? "active" : "")" id="details">
            <div class="row-fluid">
                <div class="span6">
                    <div class="well">
                        <h4>Job Details</h4>
                        <div class="control-group">
                            @Html.LabelFor(x => x.Name, new { @class = "control-label" })
                            <div class="controls">
                                @Html.EditorFor(x => x.Name)
                            </div>
                        </div>
                        <div class="control-group">
                            <label class="control-label" for="Customer">Customer:</label>
                            <div class="controls">
                                @Html.DropDownList("CustomerId", ((IList<Mavo.Assets.Models.Customer>)ViewBag.Customers).Select(x => new SelectListItem()
                           {
                               Value = x.Id.ToString(),
                               Text = x.Name,
                               Selected = Model == null || Model.CustomerId == null ? false : x.Id == Model.CustomerId
                           }), string.Empty)
                            </div>
                        </div>
                        <div class="control-group">
                            @Html.LabelFor(x => x.JobNumber, new { @class = "control-label" })
                            <div class="controls">
                                @Html.EditorFor(x => x.JobNumber)
                            </div>
                        </div>
                        <div class="control-group">
                            @Html.LabelFor(x => x.ProjectManagerId, new { @class = "control-label" })
                            <div class="controls">
                                @Html.DropDownList("ProjectManagerId", ((IList<Mavo.Assets.Models.User>)ViewBag.ProjectManagers).Select(x => new SelectListItem()
                           {
                               Value = x.Id.ToString(),
                               Text = String.Format("{0}, {1}", x.LastName, x.FirstName)
                               ,
                               Selected = Model == null || Model.ProjectManagerId == null ? false : x.Id == Model.ProjectManagerId
                           }), string.Empty)
                            </div>
                        </div>
                        <div class="control-group">
                            @Html.LabelFor(x => x.JobSiteName, new { @class = "control-label" })
                            <div class="controls">
                                @Html.EditorFor(x => x.JobSiteName)
                            </div>
                        </div>
                        @if (Model != null)
                        {
                            <div class="control-group">
                                @Html.LabelFor(x => x.Status, new { @class = "control-label" })
                                <div class="controls" id="status">
                                    @Html.DisplayFor(model => model.Status)
                                </div>
                            </div>
                        }
                    </div>
                    <div class="well">
                        <h4>Job Location</h4>
                        <div class="control-group">
                            @Html.LabelFor(x => x.Address.Address1, new { @class = "control-label" })
                            <div class="controls">
                                @Html.EditorFor(x => x.Address.Address1)
                            </div>
                        </div>
                        <div class="control-group">
                            @Html.LabelFor(x => x.Address.City, new { @class = "control-label" })
                            <div class="controls">
                                @Html.EditorFor(x => x.Address.City)
                            </div>
                        </div>
                        <div class="control-group">
                            @Html.LabelFor(x => x.Address.State, new { @class = "control-label" })
                            <div class="controls">
                                @Html.EditorFor(x => x.Address.State)
                            </div>
                        </div>
                        <div class="control-group">
                            @Html.LabelFor(x => x.Address.ZipCode, new { @class = "control-label" })
                            <div class="controls">
                                @Html.EditorFor(x => x.Address.ZipCode)
                            </div>
                        </div>
                    </div>
                </div>

                <div class="well span6">
                    <h4>Contract Details</h4>

                    <div class="control-group">
                        @Html.LabelFor(x => x.PickupTime, new { @class = "control-label" })
                        <div class="controls">
                            @Html.EditorFor(x => x.PickupTime)
                        </div>
                    </div>

                    <div class="control-group">
                        @Html.LabelFor(x => x.ForemanId, new { @class = "control-label" })
                        <div class="controls">
                            @Html.DropDownList("ForemanId", ((IList<Mavo.Assets.Models.User>)ViewBag.Foremen).Select(x => new SelectListItem()
                       {
                           Value = x.Id.ToString(),
                           Text = String.Format("{0}, {1}", x.LastName, x.FirstName),
                           Selected = Model == null || Model.ForemanId == null ? false : x.Id == Model.ForemanId
                       }), string.Empty)
                        </div>
                    </div>

                    <div class="control-group">
                        @Html.LabelFor(x => x.ContractDate, new { @class = "control-label" })
                        <div class="controls">
                            @Html.EditorFor(x => x.ContractDate)
                        </div>
                    </div>

                    <div class="control-group">
                        @Html.LabelFor(x => x.EstimatedCompletionDate, new { @class = "control-label" })
                        <div class="controls">
                            @Html.EditorFor(x => x.EstimatedCompletionDate)
                        </div>
                    </div>
                    <div class="control-group">
                        @Html.LabelFor(x => x.ContractNumber, new { @class = "control-label" })
                        <div class="controls">
                            @Html.EditorFor(x => x.ContractNumber)
                        </div>
                    </div>
                    <div class="control-group">
                        @Html.LabelFor(x => x.ContractAmount, new { @class = "control-label" })
                        <div class="controls">
                            @Html.EditorFor(x => x.ContractAmount)
                        </div>
                    </div>
                    <div class="control-group">
                        @Html.LabelFor(x => x.Description, new { @class = "control-label" })
                        <div class="controls">
                            @Html.TextAreaFor(x => x.Description)
                        </div>
                    </div>
                    <div class="control-group">
                        @Html.LabelFor(x => x.ForemanNote, new { @class = "control-label" })
                        <div class="controls">
                            @Html.TextAreaFor(x => x.ForemanNote)
                        </div>
                    </div>
                </div>
            </div>
            <div class="row-fluid">
                <div class="form-actions">
                    <input type="submit" class="btn btn-primary" />
                </div>
            </div>
        </div>

        @if (null != Model)
        {
            <div class="tab-pane active" id="assets">
                <div class="row-fluid">
                    <div class="span12 well">
                        <h4>Job Assets</h4>
                        @{Html.RenderAction("AssetPickerForJob", "Asset", new { id = Model.Id });}
                    </div>
                </div>
            </div>
        }
    </div>
}