@model Mavo.Assets.Models.ViewModel.EditJobPostModel
@using Mavo.Assets;
<div class="tab-pane @(null == Model ? "active" : "")" id="details">
    @using (Html.BeginForm(MVC.Job.Edit(), FormMethod.Post, new { @class = "form-horizontal" }))
    {
        @Html.HiddenFor(x => x.Id)
        if (null == Model)
        {
        @Html.Hidden("Status", Mavo.Assets.Models.JobStatus.New)
        }
        else
        {
        @Html.HiddenFor(x => x.Status)
        }
        <div class="row-fluid">
            <div class="span6">
                <div class="well">
                    <h4>Job Details</h4>
                    <div class="control-group">
                        @Html.LabelFor(x => x.Name, new { @class = "control-label" })
                        <div class="controls">
                            @Html.EditorFor(x => x.Name)
                        </div>
                    </div>
                    <div class="control-group">
                        <label class="control-label" for="Customer">Customer:</label>
                        <div class="controls">
                            @Html.DropDownList("CustomerId", ((IList<Mavo.Assets.Models.Customer>)ViewBag.Customers).Select(x => new SelectListItem()
                           {
                               Value = x.Id.ToString(),
                               Text = x.Name,
                               Selected = Model == null || Model.CustomerId == null ? false : x.Id == Model.CustomerId
                           }), string.Empty)
                            @*<a class="btn btn-small btn-success" href="#addCustomerModal" data-toggle="modal"><i class="icon-plus icon-white"></i></a>*@
                        </div>
                    </div>
                    <div class="control-group">
                        @Html.LabelFor(x => x.JobNumber, new { @class = "control-label" })
                        <div class="controls">
                            @Html.EditorFor(x => x.JobNumber)
                        </div>
                    </div>
                    <div class="control-group">
                        @Html.LabelFor(x => x.ProjectManagerId, new { @class = "control-label" })
                        <div class="controls">
                            @Html.DropDownList("ProjectManagerId", ((IList<Mavo.Assets.Models.User>)ViewBag.ProjectManagers).Select(x => new SelectListItem()
                           {
                               Value = x.Id.ToString(),
                               Text = String.Format("{0}, {1}", x.LastName, x.FirstName)
                               ,
                               Selected = Model == null || Model.ProjectManagerId == null ? false : x.Id == Model.ProjectManagerId
                           }), string.Empty)
                            <a class="btn btn-small btn-success" href="#addProjectManagerModal" data-toggle="modal"><i class="icon-plus icon-white"></i></a>
                        </div>
                    </div>
                    <div class="control-group">
                        @Html.LabelFor(x => x.JobSiteName, new { @class = "control-label" })
                        <div class="controls">
                            @Html.EditorFor(x => x.JobSiteName)
                        </div>
                    </div>
                    <div class="control-group">
                        @Html.LabelFor(x => x.Summary.ScopeOfWork, new { @class = "control-label" })
                        <div class="controls">
                            @Html.EditorFor(x => x.Summary.ScopeOfWork)
                        </div>
                    </div>
                    <div class="control-group">
                        @Html.LabelFor(x => x.Summary.Notifiable, new { @class = "control-label" })
                        <div class="controls">
                            @Html.EnumDropDownListFor(x => x.Summary.Notifiable)
                        </div>
                    </div>
                    <div class="control-group">
                        @Html.LabelFor(x => x.Summary.WorkersNeeded, new { @class = "control-label" })
                        <div class="controls">
                            @Html.EditorFor(x => x.Summary.WorkersNeeded)
                        </div>
                    </div>
                    <div class="control-group">
                        @Html.LabelFor(x => x.Customer.Address, new { @class = "control-label" })
                        <div class="controls" id="customerAddress">
                            @if (Model != null && Model.Customer != null)
                            {
                                @Html.DisplayFor(x => x.Customer.Address)
                            }
                        </div>
                    </div>
                    @if (Model != null)
                    {
                        <div class="control-group">
                            @Html.LabelFor(x => x.Status, new { @class = "control-label" })
                            <div class="controls" id="status">
                                @Html.DisplayFor(model => model.Status)
                            </div>
                        </div>
                       
                    }

                </div>
                <div class="well">
                    <h4>Job Location</h4>
                    <div class="control-group">
                        @Html.LabelFor(x => x.Address.Address1, new { @class = "control-label" })
                        <div class="controls">
                            @Html.EditorFor(x => x.Address.Address1)
                        </div>
                    </div>
                    <div class="control-group">
                        @Html.LabelFor(x => x.Address.Address2, new { @class = "control-label" })
                        <div class="controls">
                            @Html.EditorFor(x => x.Address.Address2)
                        </div>
                    </div>
                    <div class="control-group">
                        @Html.LabelFor(x => x.Address.City, new { @class = "control-label" })
                        <div class="controls">
                            @Html.EditorFor(x => x.Address.City)
                        </div>
                    </div>
                    <div class="control-group">
                        @Html.LabelFor(x => x.Address.State, new { @class = "control-label" })
                        <div class="controls">
                            @Html.EditorFor(x => x.Address.State)
                        </div>
                    </div>
                    <div class="control-group">
                        @Html.LabelFor(x => x.Address.ZipCode, new { @class = "control-label" })
                        <div class="controls">
                            @Html.EditorFor(x => x.Address.ZipCode)
                        </div>
                    </div>
                </div>
            </div>

            <div class="well span6">
                <h4>Contract Details</h4>

                <div class="control-group">
                    @Html.LabelFor(x => x.PickupTime, new { @class = "control-label" })
                    <div class="controls">
                        @Html.EditorFor(x => x.PickupTime)
                    </div>
                </div>



                <div class="control-group">
                    @Html.LabelFor(x => x.ContractDate, new { @class = "control-label" })
                    <div class="controls">
                        @Html.EditorFor(x => x.ContractDate)
                    </div>
                </div>

                <div class="control-group">
                    @Html.LabelFor(x => x.EstimatedCompletionDate, new { @class = "control-label" })
                    <div class="controls">
                        @Html.EditorFor(x => x.EstimatedCompletionDate)
                    </div>
                </div>
                <div class="control-group">
                    @Html.LabelFor(x => x.ContractNumber, new { @class = "control-label" })
                    <div class="controls">
                        @Html.EditorFor(x => x.ContractNumber)
                    </div>
                </div>
                <div class="control-group">
                    @Html.LabelFor(x => x.ContractAmount, new { @class = "control-label" })
                    <div class="controls">
                        @Html.EditorFor(x => x.ContractAmount)
                    </div>
                </div>
                <div class="control-group">
                    @Html.LabelFor(x => x.Description, new { @class = "control-label" })
                    <div class="controls">
                        @Html.TextAreaFor(x => x.Description)
                    </div>
                </div>
                <div class="control-group">
                    @Html.LabelFor(x => x.ForemanNote, new { @class = "control-label" })
                    <div class="controls">
                        @Html.TextAreaFor(x => x.ForemanNote)
                    </div>
                </div>
            </div>
            <div class="well span6">
                <h4>Contractor</h4>
                <div class="control-group">
                    @Html.LabelFor(x => x.ContractAmount, new { @class = "control-label" })
                    <div class="controls">
                        @Html.EditorFor(x => x.ContractAmount)
                    </div>
                </div>
                <div class="control-group">
                    @Html.LabelFor(x => x.ContractAmount, new { @class = "control-label" })
                    <div class="controls">
                        @Html.EditorFor(x => x.ContractAmount)
                    </div>
                </div>
                <div class="control-group">
                    @Html.LabelFor(x => x.ContractAmount, new { @class = "control-label" })
                    <div class="controls">
                        @Html.EditorFor(x => x.ContractAmount)
                    </div>
                </div>
                <div class="control-group">
                    @Html.LabelFor(x => x.ContractAmount, new { @class = "control-label" })
                    <div class="controls">
                        @Html.EditorFor(x => x.ContractAmount)
                    </div>
                </div>
                <div class="control-group">
                    @Html.LabelFor(x => x.ContractAmount, new { @class = "control-label" })
                    <div class="controls">
                        @Html.EditorFor(x => x.ContractAmount)
                    </div>
                </div>
                <div class="control-group">
                    @Html.LabelFor(x => x.ContractAmount, new { @class = "control-label" })
                    <div class="controls">
                        @Html.EditorFor(x => x.ContractAmount)
                    </div>
                </div>
                <div class="control-group">
                    @Html.LabelFor(x => x.ContractAmount, new { @class = "control-label" })
                    <div class="controls">
                        @Html.EditorFor(x => x.ContractAmount)
                    </div>
                </div>
                <div class="control-group">
                    @Html.LabelFor(x => x.ContractAmount, new { @class = "control-label" })
                    <div class="controls">
                        @Html.EditorFor(x => x.ContractAmount)
                    </div>
                </div>
                <div class="control-group">
                    @Html.LabelFor(x => x.ContractAmount, new { @class = "control-label" })
                    <div class="controls">
                        @Html.EditorFor(x => x.ContractAmount)
                    </div>
                </div>
                <div class="control-group">
                    @Html.LabelFor(x => x.ContractAmount, new { @class = "control-label" })
                    <div class="controls">
                        @Html.EditorFor(x => x.ContractAmount)
                    </div>
                </div>
                <div class="control-group">
                    @Html.LabelFor(x => x.ContractAmount, new { @class = "control-label" })
                    <div class="controls">
                        @Html.EditorFor(x => x.ContractAmount)
                    </div>
                </div>
            </div>
        </div>
        <div class="row-fluid">
            <div class="form-actions">
                <input type="submit" id="btnSubmit" class="btn btn-primary" />
            </div>
        </div>
    }
</div>
