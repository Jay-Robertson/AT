@using Mavo.Assets
@model IList<Mavo.Assets.Models.Job>
@if (Model.Any())
{
    <div class="row-fluid well">
        <h3>@ViewData["title"]</h3>
        <table class="table table-condensed table-striped table-hover">
            <thead>
                <tr>
                    <th>Job</th>
                    <th>Pick Date</th>
                    @if (Model.Any(x => x.PickStarted.HasValue))
                    {
                        <th>Pick Started</th>
                    }
                    @if (Model.Any(x => x.PickCompleted.HasValue))
                    {
                        <th>Pick Completed</th>
                    }
                    @if (Model.Any(x => x.PickCompleted.HasValue && x.PickStarted.HasValue))
                    {
                        <th>Total Picking Time</th>
                    }
                    @if (Model.Any(x => x.ReturnStarted.HasValue))
                    {
                        <th>Return Started</th>
                    }
                    @if (Model.Any(x => x.ReturnCompleted.HasValue))
                    {
                        <th>Return Completed</th>
                    }
                    @if (Model.Any(x => x.ReturnStarted.HasValue && x.ReturnCompleted.HasValue))
                    {
                        <th>Total Return Time</th>
                    }
                    <th>Job #</th>
                    <th>Customer</th>
                    <th>Employee</th>
                </tr>
            </thead>
            <tbody>
                @foreach (var job in Model)
                {
                    <tr>
                        <td><a href="/job/edit/@job.Id">@job.Name</a></td>
                        <td>@Html.DisplayFor(x => job.PickupTime)</td>
                        @if (Model.Any(x => x.PickStarted.HasValue))
                        {
                            <td>@Html.DisplayFor(x => job.PickStarted)</td>
                        }
                        @if (Model.Any(x => x.PickCompleted.HasValue))
                        {
                            <td>@Html.DisplayFor(x => job.PickCompleted)</td>
                        }
                        @if (Model.Any(x => x.PickCompleted.HasValue && x.PickStarted.HasValue))
                        {
                            <td>
                                @if (job.PickCompleted.HasValue && job.PickStarted.HasValue)
                                {
                                    @((job.PickCompleted.Value - job.PickStarted.Value).ToRelative())
                                }
                            </td>
                        }

                        @if (Model.Any(x => x.ReturnStarted.HasValue))
                        {
                            <td>@Html.DisplayFor(x => job.ReturnStarted)</td>
                        }
                        @if (Model.Any(x => x.ReturnCompleted.HasValue))
                        {
                            <td>@Html.DisplayFor(x => job.ReturnCompleted)</td>
                        }
                        @if (Model.Any(x => x.ReturnStarted.HasValue && x.ReturnCompleted.HasValue))
                        {
                            <td>
                                @if (job.ReturnCompleted.HasValue && job.ReturnStarted.HasValue)
                                {
                                    @((job.ReturnCompleted.Value - job.ReturnStarted.Value).ToRelative())
                                }
                            </td>
                        }
                        <td>@job.JobNumber</td>
                        <td>@(job.Customer != null ? job.Customer.Name : "")</td>
                        <td>@(job.ProjectManager != null ? job.ProjectManager.FullName : "")</td>
                    </tr>
                }

            </tbody>
        </table>

    </div>
}