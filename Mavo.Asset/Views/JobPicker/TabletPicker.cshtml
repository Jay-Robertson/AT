@model Mavo.Assets.Models.ViewModel.PickAJobModel

@{
    ViewBag.Title = "TabletPicker";
    Layout = MVC.JobPicker.Views._PickerLayout;
}

@section AdditionalScripts
{
    <script type="text/javascript">

        function resetBarcode() {
            $('#barcodeInput').val('').focus();
        }

        function resetMessages() {
            $('#serializedErrorBlock').removeClass('in');
            $('.alert').hide();
        }

        $('.pickform').submit(function () {
            resetMessages();
            var assetId = $(this).closest('.modal').data('asset-id');
            var $pickRow = $('#toPickTable tr[data-asset-id="' + assetId + '"]');
            var $pickBox = $(this).find(':hidden[name="quantity"]');
            var quantityNeeded = Number($pickRow.data('quantity-needed'));
            var quantityPicked = Number($pickBox.val());

            // must enter a number
            if (isNaN(quantityPicked)) {
                $('#errorMessage').html('There was an error scanning this item');
                $('#serializedErrorBlock').show();
                return false;
            }

            $.ajax({
                type: 'post',
                url: '/JobPicker/PickNonSerialized',
                data: {
                    jobId: '@Model.JobId',
                    assetId: assetId,
                    quantity: quantityPicked
                }
            })
            .fail(function (xhr, status, data) {
                $('#serializedErrorBlock').show();
                $('#errorMessage').text(xhr.responseText);
            })
            .done(function (data) {

                // update remaining needed quantity
                quantityNeeded -= quantityPicked;
                $pickRow.data('quantity-needed', quantityNeeded);
                $pickRow.find('.quantity-needed').text(quantityNeeded);
                $pickBox.val(quantityNeeded);
                if (quantityNeeded <= 0) {
                    $pickRow.remove();
                }

                // update already picked quantity
                $alreadyPickedRow = $('#alreadyPickedTable tr[data-asset-id="' + assetId + '"]');
                if ($alreadyPickedRow.length > 0) {
                    $alreadyPickedRow.replaceWith(data);
                }
                else {
                    $('#alreadyPickedTable tbody').append(data);
                }

            });

            $('#pick-' + assetId).modal('hide');
            return false;
        });


        $('#add-button').click(function () {
            $('#barcode-panel').hide();
            $('#add').show();
            $('#add ~ *').hide();
        });
        $('#add-done').click(function () {
            window.location.reload();
        });

        $('#alreadyPickedTable').on('click', '.badge-info', function () {
            var assetId = $(this).closest('tr').data('asset-id');
            var jobId = '@Model.JobId';
            var currentQty = Number($(this).text());
            var newQty = prompt("Enter an updated quantity:", currentQty);
            if (null == newQty) return false;
            newQty = Number(newQty);
            if (isNaN(newQty)) return false;
            if (newQty == currentQty) return false;
            $.ajax({
                type: 'post',
                url: '/JobPicker/UpdateQuantity/' + jobId,
                data: {
                    assetId: assetId,
                    quantity: newQty
                }
            })
            .fail(function () { alert('Error updating quantity.'); })
            .done(function () { window.location.reload(); });
            return false;
        });
 
        $('.quantity ~ a[data-increment]').click(function () {
            var $hidden = $(this).prevAll('input:hidden');
            var $label = $(this).prevAll('.quantity');

            var val = Number($hidden.val());
            var inc = Number($(this).data('increment'));
            if (isNaN(inc)) return false;
            if (isNaN(val)) val = 0;

            val += inc;
            if (val < 0) val = 0;

            $hidden.val(val);
            $label.text(val);
            return true;
        });

        $(window).on('barcode', function (e, barcode) {
            if ($('#add').is(':visible')) {
                $('#asset-search').val(barcode);
            }
            else {
                $('#barcodeInput').val(barcode);
                $('#assetScanner').submit();
            }
        });

        $('#assetScanner').submit(function () {
            resetMessages();
            var barcode = $('#barcodeInput').val();
            $('#loading').show();
            $.ajax({
                type: 'post',
                url: '/JobPicker/PickSerialized',
                data: {
                    jobId: '@Model.JobId',
                    barcode: barcode
                }
            })
            .fail(function (xhr, status, data) {
                $('#loading').hide();
                $('#serializedErrorBlock').show();
                $('#errorMessage').text(xhr.responseText);
                resetBarcode();
            })
            .done(function (data) {

                // check for a non-serialized asset respons in json
                if (data && data.AssetKind != 1) {
                    $('#pick-' + data.AssetId).modal('show');
                }
                else {
                    var assetId = $(data).data('asset-id');
                    var assetItemId = $(data).data('asset-item-id');

                    // append row to already picked table
                    $('#alreadyPickedTable').append(data);

                    // decrement (possibly remove) the to be picked quantity
                    var $pickRow = $('#toPickTable tr[data-asset-id="' + assetId + '"]');
                    var needed = $pickRow.data('quantity-needed') - 1;
                    $pickRow.data('quantity-needed', needed);
                    $pickRow.find('.quantity-needed').text(needed);
                    if (needed == 0) {
                        $pickRow.remove();
                    }

                    $('#serializedSuccessBlock').show();
                }

                $('#loading').hide();
                resetBarcode();
            });
            return false;

        });

    </script>
}
 
<div id="loading" class="modal-backdrop" style="display: none;">
    <div style="position: absolute; width: 100px; text-align: center; height: 40px; left: 50%; top: 50%; margin-left: -50px; margin-top: -20px; background: #fff; border-radius: 10px; line-height: 40px;">
        Processing...
    </div>
</div>

<input type="hidden" name="id" id="barcodeInput" />
@using (Html.BeginForm(MVC.Asset.GetAssetDetail(), FormMethod.Post, new { @class = "form form-inline", id = "assetScanner" }))
{
    var serializedAssets = Model.Assets.Where(x => x.Kind == Mavo.Assets.Models.AssetKind.Serialized).ToList();
    foreach (var serialzedAsset in serializedAssets)
    {
    <input type="hidden" name="availableAssets[@(serializedAssets.FindIndex(x => x.AssetId == serialzedAsset.AssetId).ToString())]" value="@serialzedAsset.AssetId" />
    }
}

<div id="add" style="display: none;">
    @{ Html.RenderAction("UnlockedAssetPickerForJob", "Asset", new { id = Model.JobId }); }
    <button id="add-done" class="btn btn-primary btn-large">Continue Picking</button>
</div>

<div class="alert alert-block alert-success hide" id="serializedSuccessBlock">
    <strong>Barcode Scanned Succesfully</strong>
</div>

<div class="alert alert-block alert-error hide" id="serializedErrorBlock">
    <h4 id="errorMessage">Error</h4>
</div>

<h2>
    <button class="btn btn-primary btn-large" id="add-button" style="float: right;">Add Item to Picklist</button>
    To Be Picked
</h2>

<table class="table table-striped table-hover" id="toPickTable">
    <thead>
        <tr>
            <th>#</th>
            <th>Item</th>
            <th>Needed</th>
            <th></th>
        </tr>
    </thead>
    <tbody>
        @foreach (var item in Model.Assets.Where(x => x.QuantityNeeded > 0))
        {
            <tr data-asset-id="@item.AssetId" data-quantity-needed="@item.QuantityNeeded">
                <td>@item.MavoItemNumber</td>
                <td>@item.Name</td>
                <td class="quantity-needed">
                    @item.QuantityNeeded
                </td>
                <td>
                    @if (item.Kind != Mavo.Assets.Models.AssetKind.Serialized)
                    {
                        <a href="#pick-@(item.AssetId)" role="button"  data-toggle="modal" class="btn btn-primary"><i class="icon-shopping-cart icon-white"></i>&nbsp;Pick</a>
                    }
                    else
                    {
                        <text>(scan barcodes)</text>
                    }
                </td>
            </tr>

        }
    </tbody>
</table>
<h2>Already Picked</h2>
<table class="table table-striped table-hover" id="alreadyPickedTable">
    <thead>
        <tr>
            <th>#</th>
            <th>Item</th>
            <th>Picked</th>
        </tr>
    </thead>
    <tbody>
        @foreach (var pickedAsset in Model.PickedAssets)
        {
            Html.RenderPartial(MVC.JobPicker.Views._PickedAssetRow, new Mavo.Assets.Controllers.PickedAssetRow()
            {
                AssetId = pickedAsset.AssetId,
                AssetName = pickedAsset.Name,
                CurrentPickedQty = pickedAsset.QuantityTaken.Value,
                MavoNumber = pickedAsset.MavoItemNumber,
                Barcodes = pickedAsset.Barcode,
                AssetItemId = pickedAsset.AssetItemId,
            });
        }
    </tbody>
</table>
<span id="pickedSerialized"></span>

<div class="row-fluid">
    <div class="form-actions">
        @using (Html.BeginForm(MVC.JobPicker.CompletePicking(Model.JobId)))
        {
            <input type="submit" class="btn btn-primary" id="btnSubmit" value="Done Picking" />
        }
    </div>
</div>

@foreach (var item in Model.Assets.Where(x => x.Kind != Mavo.Assets.Models.AssetKind.Serialized))
{
    <div id="pick-@(item.AssetId)" data-asset-id="@item.AssetId" class="modal hide fade" tabindex="-1" role="dialog" aria-labelledby="pick@(item.AssetId)Label" aria-hidden="true">
        <div class="modal-header">
            <button type="button" class="close" data-dismiss="modal" aria-hidden="true">×</button>
            <h3 id="myModalLabel">Pick @item.Name</h3>
        </div>
        @using (Html.BeginForm("Index", "JobPicker", FormMethod.Post, new { @class = "form-inline pickform", id = "pickForm" + item.AssetId.ToString() }))
        {
            <div class="modal-body">
                <table class="table">
                    <thead>
                        <tr>
                            <th>#</th>
                            <th>Item</th>
                            <th>Needed</th>
                        </tr>
                    </thead>
                    <tbody>
                        <tr>
                            <td>@item.MavoItemNumber</td>
                            <td>@item.Name</td>
                            <td class="quantity-needed">@item.QuantityNeeded</td>
                        </tr>
                    </tbody>
                </table>
                <h3>
                    Quantity Picked:
                    <input type="hidden" value="@item.QuantityNeeded" name="quantity" />
                    <span class="quantity">@item.QuantityNeeded</span>
                    <a href="#" class="btn btn-large btn-success increment" data-increment="1">+1</a>
                    <a href="#" class="btn btn-large btn-danger increment" data-increment="-1">-1</a>
                </h3>
            </div>
            <div class="modal-footer">
                <button class="btn" data-dismiss="modal" aria-hidden="true">Close</button>
                <button type="submit" class="btn btn-primary pick">Pick</button>
            </div>
        }
    </div>
}

   <table id="truck-info" class="hide">
        <tr>
            <td>Keys/Job Book on Dock</td>
            <td>_____________________________________</td>
        </tr>
        <tr>
            <td>Loaded on Truck#</td>
            <td>_____________________________________</td>
        </tr>
        <tr>
            <td>Truck Needs Gas</td>
            <td>_____________________________________</td>
        </tr>
        <tr>
            <td>Order Filled By</td>
            <td>_____________________________________</td>
        </tr>
        <tr>
            <td>Days Truck is Needed</td>
            <td>_____________________________________</td>
        </tr>
        <tr>
            <td>Order Returned By</td>
            <td>_____________________________________</td>
        </tr>
    </table>