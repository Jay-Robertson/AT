@model Mavo.Assets.Models.ViewModel.PickAJobModel
@{
    ViewBag.Title = "Index";
    var unserializedAssets = Model.Assets.Where(x => x.Kind != Mavo.Assets.Models.AssetKind.Serialized).ToList();
    var serializedAssets = Model.Assets.Where(x => x.Kind == Mavo.Assets.Models.AssetKind.Serialized).ToList();
}
@section LeftNav
{
    @{Html.RenderPartial("_JobPickerSidebar");}
}
<div class="row-fluid">
    <div class="well">
        <h4>Job Details</h4>
        <div class="row-fluid">
            <div class="span4">
                <span>Job Name:</span>
                <span class="label label-info">@Model.JobName</span>
            </div>
            <div class="span4">
                <span>Job Number:</span>
                <span class="label label-info">@Model.JobNumber</span>
            </div>
            <div class="span4">
                <span>Manager:</span>
                <span class="label label-info">@Model.Manager</span>
            </div>
        </div>
        <div class="row-fluid">
            <div class="span4">
                <span>Customer:</span>
                <span class="label label-info">@Model.Customer</span>
            </div>
            <div class="span4">
                <span>Job Site:</span>
                <span class="label label-info">@Model.JobSite</span>
            </div>
            <div class="span4">
                <span>Foreman:</span>
                <span class="label label-info">@Model.Foreman</span>
            </div>
        </div>
    </div>
</div>
@using (Html.BeginForm(MVC.JobPicker.Index(Model.JobId, null), FormMethod.Post, new { @class = "form-inline" }))
{
    var index = 0;
    if (Model.Assets != null && Model.Assets.Count > 0) {
        @Html.EditorFor(x => x.Assets[0].Barcode)
    }
    <div class="row-fluid">
        <h4>Assets</h4>
        <table class="table table-striped table-hover">
            <thead>
                <tr>
                    <th>Item</th>
                    <th>Name</th>
                    <th>Status</th>
                    <th></th>
                </tr>
            </thead>
            <tbody>
                @for (int i = 0; i < serializedAssets.Count(); i++)
                {
                    for (int y = 0; y < serializedAssets[i].QuantityNeeded; y++)
                    {
                    <tr>
                        <td>@serializedAssets[i].Id</td>
                        <td>@serializedAssets[i].Name</td>
                        <td>@(String.IsNullOrEmpty(serializedAssets[i].Status) ? "" : serializedAssets[i].Status)</td>
                        <td>
                            <div class=" control-group">
                                <div class="input-prepend input-append">
                                    <span class="add-on"><i class="icon-barcode"></i></span>
                                    <input class="text-box single-line" data-val="true"  data-val-required="Job Name is Required" data-val-remote="Serial number does not exist, or is out of stock" data-val-remote-additionalfields="*.Barcode" data-val-remote-url="/Asset/IsAssetItemAvailable" id="serializedAssets_@(index)__Barcode" name="assets[@i].Barcode" type="text" value="">
                                </div>
                            </div>
                            <input type="hidden" name="assets[@index].AssetId" value="@serializedAssets[i].AssetId" />
                            <input type="hidden" name="assets[@(index)].Name" value="@serializedAssets[i].Name" />
                            <input type="hidden" name="assets[@(index)].Status" value="@serializedAssets[i].Status" />
                            <input type="hidden" name="assets[@(index)].Id" value="@serializedAssets[i].Id" />
                            <input type="hidden" name="assets[@(index)].QuantityNeeded" value="@serializedAssets[i].QuantityNeeded" />
                        </td>

                    </tr>
                        index++;
                    }

                }
                @for (int i = 0; i < unserializedAssets.Count(); i++)
                {
                    <tr class="@(unserializedAssets[i].NotEnoughQuantity ? "warning" : "")">
                        <td>@unserializedAssets[i].Id</td>
                        <td>@unserializedAssets[i].Name</td>
                        <td>@unserializedAssets[i].Status</td>
                        <td>
                            <input type="number" class="input-mini" name="assets[@i].QuantityTaken" value="@unserializedAssets[i].QuantityNeeded"/><text>/</text>
                            @unserializedAssets[i].QuantityNeeded

                            <input type="hidden" name="assets[@index].AssetId" value="@unserializedAssets[i].AssetId" />
                            <input type="hidden" name="assets[@index].Name" value="@unserializedAssets[i].Name" />
                            <input type="hidden" name="assets[@index].Status" value="@unserializedAssets[i].Status" />
                            <input type="hidden" name="assets[@index].Id" value="@unserializedAssets[i].Id" />
                            <input type="hidden" name="assets[@index].QuantityNeeded" value="@unserializedAssets[i].QuantityNeeded" />
                            @if (unserializedAssets[i].NotEnoughQuantity)
                            {
                                <span class="label label-important">@unserializedAssets[i].QuantityAvailable in inventory</span>
                            }
                        </td>
                    </tr>
                            index++;
                }
            </tbody>
        </table>
    </div>
    <div class="row-fluid">
        <div class="form-actions">
            <input type="submit" class="btn btn-primary" />
        </div>
    </div>
}
