@model Mavo.Assets.Models.ViewModel.PickAJobModel
@{
    ViewBag.Title = "Index";
}
@section LeftNav
{
    @{Html.RenderPartial("_JobHeader", Model);}
}

@if (!Model.PickStarted.HasValue)
{
    <div class="well" id="beginPicking">
        <a href="#startModal" role="button" class="btn btn-large btn-primary" data-toggle="modal">Begin Picking</a>
    </div>
    <div id="startModal" class="modal show fade" tabindex="-1" role="dialog" aria-labelledby="myModalLabel" aria-hidden="true" data-show="true">
        <div class="modal-header">
            <h3 id="myModalLabel">Start Picking?</h3>
        </div>
        <div class="modal-body">
            <p>Would you like to start picking this job?</p>
        </div>
        <div class="modal-footer">
            <button id="btnStartPicking" class="btn btn-primary">Start Picking</button>
        </div>
    </div>
}
<div class="alert alert-info @(!Model.PickStarted.HasValue ? "hide" : "")" id="pickupTimeDiv">
    <button type="button" class="close" data-dismiss="alert">&times;</button>
    <strong>Job Picking!</strong> This job started being picked up at <span id="pickupTime">@(Model.PickStarted.HasValue ? Model.PickStarted.Value.ToString() : "")</span>
</div>
@using (Html.BeginForm(MVC.JobPicker.Index(Model.JobId, null), FormMethod.Post, new { @class = "form-inline" }))
{
    @Html.ValidationSummary()
    var index = 0;
    foreach (var group in Model.Assets.GroupBy(x => x.AssetCategory))
    {
    <div class="row-fluid">
        <h4>@group.Key</h4>
        <table class="table table-striped table-hover">
            <thead>
                <tr>
                    <th>Item</th>
                    <th>Name</th>
                    <th>Status</th>
                    <th></th>
                </tr>
            </thead>
            <tbody>
                @for (int i = 0; i < group.Count(); i++)
                {
                    if (group.ElementAt(i).Kind == Mavo.Assets.Models.AssetKind.Serialized)
                    {
                        for (int y = 0; y < group.ElementAt(i).QuantityNeeded; y++)
                        {
                    <tr>
                        <td>@group.ElementAt(i).Id</td>
                        <td>@group.ElementAt(i).Name</td>
                        <td>@(String.IsNullOrEmpty(group.ElementAt(i).Status) ? "" : group.ElementAt(i).Status)</td>
                        <td>
                            <div class="control-group">
                                <div class="input-prepend input-append">
                                    <span class="add-on"><i class="icon-barcode"></i></span>
                                    <input class="text-box single-line" @(!Model.PickStarted.HasValue ? "disabled" : "") 
                                        data-val="true"   data-val-remote="Barcode does not exist, or is out of stock" 
                                        data-val-remote-additionalfields="*.Barcode, *.AssetId" 
                                        data-val-remote-url="/Asset/IsAssetItemAvailable" 
                                        name="assets[@(index)].Barcode" id="assets_@(index)__Barcode" type="text" />

                                </div>
                                @Html.ValidationMessage("assets[" + index.ToString() + "].Barcode")
                            </div>
                            <input type="hidden" name="assets[@(index)].AssetId" value="@group.ElementAt(i).AssetId" />
                            <input type="hidden" name="assets[@(index)].Name" value="@group.ElementAt(i).Name" />
                            <input type="hidden" name="assets[@(index)].Kind" value="@group.ElementAt(i).Kind" />
                            <input type="hidden" name="assets[@(index)].Status" value="@group.ElementAt(i).Status" />
                            <input type="hidden" name="assets[@(index)].Id" value="@group.ElementAt(i).Id" />
                            <input type="hidden" name="assets[@(index)].QuantityNeeded" value="@group.ElementAt(i).QuantityNeeded" />
                        </td>
                    </tr>
                       
                            index++;
                        }
                    }
                    else
                    {
                    <tr class="@(group.ElementAt(i).NotEnoughQuantity ? "warning" : "")">
                        <td>@group.ElementAt(i).Id</td>
                        <td>@group.ElementAt(i).Name</td>
                        <td>@group.ElementAt(i).Status</td>
                        <td>
                            <input type="number" class="input-mini" @(!Model.PickStarted.HasValue ? "disabled" : "")  name="assets[@index].QuantityTaken" value="@group.ElementAt(i).QuantityNeeded"/><text>/</text>
                            @group.ElementAt(i).QuantityNeeded

                            <input type="hidden" name="assets[@index].AssetId" value="@group.ElementAt(i).AssetId" />
                            <input type="hidden" name="assets[@index].Name" value="@group.ElementAt(i).Name" />
                            <input type="hidden" name="assets[@index].Status" value="@group.ElementAt(i).Status" />
                            <input type="hidden" name="assets[@index].Id" value="@group.ElementAt(i).Id" />
                            <input type="hidden" name="assets[@index].QuantityNeeded" value="@group.ElementAt(i).QuantityNeeded" />
                            @if (group.ElementAt(i).NotEnoughQuantity)
                            {
                                <span class="label label-important">@group.ElementAt(i).QuantityAvailable in inventory</span>
                            }
                        </td>
                    </tr>
                            index++;
                    }

                }
            </tbody>
        </table>
    </div>

    }
   
    <div class="row-fluid">
        <div class="form-actions">
            <input type="submit" class="btn btn-primary" id="btnSubmit" />
            <span class="btn btn-primary disabled" id="btnSubmitDisabled">Submit</span>
        </div>
    </div>
}
