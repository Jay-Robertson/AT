@model Mavo.Assets.Models.ViewModel.PickAJobModel
@{
    ViewBag.Title = "TabletReturner";
    Layout = "~/Views/JobReturner/_ReturnerLayout.cshtml";
}

@section AdditionalScripts
{
    <script type="text/javascript">
        var alreadyReturned = [
            @foreach (var x in Model.ReturnedAssets.Where(x => x.Kind == Mavo.Assets.Models.AssetKind.Serialized)) {
            <text>'@x.Barcode',</text>
            }
            ''
        ];
        $('#serializedErrorBlock').hide();

        function resetMessages() {
            $('#serializedErrorBlock').removeClass('in');
            $('.alert').hide();
        }

        function resetBarcodeInput() {
            $('#barcodeInput').val('').focus();
            $('#returnAsDamaged').removeAttr('checked');
            $('#assetScanner :submit')
                .toggleClass('btn-primary', true)
                .toggleClass('btn-danger', false)
                .val('Scan & Return');
        }

        $('.modal-return-nonserialized form').submit(function () {
            resetMessages();
            var modal = $(this).closest('.modal');
            var assetId = modal.data('asset-id');
            var quantityNeeded = modal.data('quantity-needed');
            var quantityReturned = parseInt(modal.find(':text[name="quantity"]').val());

            // validate is positive integer or zero
            if (isNaN(quantityReturned) || quantityReturned < 0) {
                alert('Please enter a valid number of at least zero.');
                return false;
            }

            $.ajax({
                url: $(this).attr('action'),
                type: 'POST',
                data: {
                    jobId: '@Model.JobId',
                    assetId: assetId,
                    quantity: quantityReturned
                }
            })
            .fail(function (data) {
                modal.find('.alert').show();
            })
            .done(function (data) {

                // hide this modal
                modal.modal('hide');

                // remove the row from the 'needed' table,
                // /* yes, *even if there are still needed items left* */
                // NO! not unless they're all returned! (sigh.. gh #167)
                if (quantityNeeded - quantityReturned <= 0) {
                    $('#row-' + assetId).remove();
                }
                else {
                    var n = quantityNeeded - quantityReturned;
                    modal.data('quantity-needed', n);
                    modal.find('.quantity').text(n);
                    $('#row-' + assetId + ' .quantity').text(n);
                }
                
                // update the html in the already returned table
                if ($('#asset-row-' + assetId).length) {
                    $('#asset-row-' + assetId).replaceWith(data);
                }
                else {
                    $('#alreadyReturnedTable').append(data);
                }
            });

            return false;
        });

        $('#assetScanner').submit(function () {
            resetMessages();

            // already scanned?
            var barcode = $('#barcodeInput').val().trim();
            if (barcode.length < 1) return false;
            if ($.inArray(barcode, alreadyReturned) > -1)
            {
                $('#serializedErrorBlock').show();
                $('#errorMessage').html('You have already scanned ' + $('#barcodeInput').val());
                $('#serializedErrorBlock').addClass('in');
                resetBarcodeInput();
                return false;
            }

            $('#loading').show();
            $.ajax({
                type: 'POST',
                url: '/JobReturner/ReturnSerialized',
                data: {
                    jobId: '@Model.JobId',
                    barcode: barcode,
                    isDamaged: $('#returnAsDamaged').is(':checked')
                }
            })
            .fail(function (xhr, status, data) {
                $('#loading').hide();
                $('#serializedErrorBlock').show();
                $('#errorMessage').text(xhr.responseText);
                $('#serializedErrorBlock').addClass('in');
                resetBarcodeInput();
            })
            .done(function (data) {
                $('#loading').hide();
                $('#serializedSuccessBlock').show();
                if (data && !isNaN(Number(data.AssetKind)) && data.AssetKind != 1) {
                    $('#modal-return-' + data.AssetId).modal('show');
                }
                else {
                    var assetItemId = $(data).data('asset-item-id');
                    $('#alreadyReturnedTable').append(data);
                    $('#toReturnTable tr[data-asset-item-id="' + assetItemId + '"]').remove();
                    resetBarcodeInput();
                }
            });

            return false;
        });
        

        $("form input[type=submit]").click(function () {
            $("input[type=submit]", $(this).parents("form")).removeAttr("clicked");
            $(this).attr("clicked", "true");
        });

        // set the focus to the quantity text box whenever the return non-serialized modal is shown,
        // and hide any alerts
        $('.return-quantity-button').click(function () {
            var modal = $($(this).attr('href'))
            var txt = modal.find(':text[name="quantity"]');
            setTimeout(function () {
                modal.find('.alert').hide();
                txt.focus();
            }, 0);
        });

        // alter the return button when the damaged checkbox is marked
        $('#returnAsDamaged').click(function () {
            var checked = $(this).is(':checked');
            $('#assetScanner :submit')
                .toggleClass('btn-primary', !checked)
                .toggleClass('btn-danger', checked)
                .val(checked ? 'Scan & Return as Damaged' : 'Scan & Return');
        });

        $('#alreadyReturnedTable').on('click', '.badge-info', function () {
            var assetId = $(this).closest('tr').data('asset-id');
            var jobId = '@Model.JobId';
            var currentQty = Number($(this).text());
            var newQty = prompt("Enter an updated quantity:", currentQty);
            if (null == newQty) return false;
            newQty = Number(newQty);
            if (isNaN(newQty)) return false;
            if (newQty == currentQty) return false;
            $.ajax({
                type: 'post',
                url: '/JobReturner/UpdateQuantity/' + jobId,
                data: {
                    assetId: assetId,
                    quantity: newQty
                }
            })
            .fail(function () { alert('Error updating quantity.'); })
            .done(function () { window.location.reload(); });
            return false;
                });


        $('.quantity ~ div.btn-group a[data-increment]').click(function () {
            var $text = $(this).parent().prevAll('.quantity');

            var val = Number($text.val());
            var inc = Number($(this).data('increment'));
            if (isNaN(inc)) return false;
            if (isNaN(val)) val = 0;

            val += inc;
            if (val < 0) val = 0;

            $text.val(val);
            return true;
        });

    </script>
}

<div id="loading" class="modal-backdrop" style="display: none;">
    <div style="position: absolute; width: 100px; text-align: center; height: 40px; left: 50%; top: 50%; margin-left: -50px; margin-top: -20px; background: #fff; border-radius: 10px; line-height: 40px;">
        Processing...
    </div>
</div>


<div class="well well-small">
    @using (Html.BeginForm(MVC.Asset.GetAssetDetail(), FormMethod.Post, new { @class = "form form-inline", id = "assetScanner" }))
    {
        var serializedAssets = Model.Assets.Where(x => x.Kind == Mavo.Assets.Models.AssetKind.Serialized).ToList();
        foreach (var serialzedAsset in serializedAssets)
        {
        <input type="hidden" name="availableAssets[@(serializedAssets.FindIndex(x => x.AssetId == serialzedAsset.AssetId).ToString())]" value="@serialzedAsset.AssetId" />
        }
        <input type="hidden" name="jobId" value="@Model.JobId" />
        <input type="text" name="id" id="barcodeInput" placeholder="Scan a Barcode" class="input-large" style="height: 37px; font-size: 18px;" data-barcode-receiver="true" />
        <input type="submit" name="return" class="btn btn-primary btn-large" value="Scan & Return" />
        <div style="margin-top: 10px;">
            <label class="checkbox" id="returnAsDamagedLabel">
                <input type="checkbox" name="returndamaged" value="1" id="returnAsDamaged" />
                Item is Damaged
            </label>
        </div>
        @*<input type="submit" name="returndamaged" class="btn btn-danger" value="Scan & Return Damaged" />*@
    }
</div>

<div class="alert alert-block alert-success hide" id="serializedSuccessBlock">
    <strong>Barcode Scanned Succesfully</strong>
</div>

<div class="alert alert-block alert-error fade" id="serializedErrorBlock">
    <h4 id="errorMessage">Error</h4>
</div>

<h2>To Be Returned</h2>
<table class="table table-striped table-hover" id="toReturnTable">
    <thead>
        <tr>
            <th>#</th>
            <th>Item</th>
            <th>Needed</th>
            <th></th>
        </tr>
    </thead>
    <tbody>
        @foreach (var item in Model.Assets.Where(x => x.QuantityNeeded > 0))
        {
            <tr id="row-@(item.AssetId)" @if (item.Kind == Mavo.Assets.Models.AssetKind.Serialized) { <text>data-asset-item-id="@item.AssetItemId"</text> }>
                <td>@item.MavoItemNumber</td>
                <td>@item.Name</td>
                <td class="quantity">@item.QuantityNeeded</td>
                <td>
                    @if (item.Kind != Mavo.Assets.Models.AssetKind.Serialized)
                    {
                        <a href="#modal-return-@(item.AssetId)" role="button"  data-toggle="modal" class="btn btn-primary return-quantity-button"><i class="icon-upload icon-white"></i>&nbsp;Return</a>
                    }
                    else
                    {
                        <span class="label label-info"><i class="icon-white icon-barcode"></i> @item.Barcode</span>
                    }
                </td>
            </tr>
        }
    </tbody>
</table>
<h2>Already Returned</h2>
<table class="table table-striped table-hover" id="alreadyReturnedTable">
    <thead>
        <tr>
            <th>#</th>
            <th>Item</th>
            <th>Returned</th>
        </tr>
    </thead>
    <tbody>
        @foreach (var returnedAsset in Model.ReturnedAssets)
        {
            Html.RenderPartial(MVC.JobPicker.Views._PickedAssetRow, new Mavo.Assets.Controllers.PickedAssetRow()
            {
                AssetId = returnedAsset.AssetId,
                AssetItemId = returnedAsset.AssetItemId,
                AssetName = returnedAsset.Name,
                CurrentPickedQty = returnedAsset.QuantityReturned.Value,
                Barcodes = returnedAsset.Barcode,
                MavoNumber = returnedAsset.MavoItemNumber,
                Damaged = returnedAsset.IsDamaged
            });
        }
    </tbody>
</table>
<span id="returnedSerialized"></span>

<div class="row-fluid">
    <div class="form-actions">
        @using (Html.BeginForm("CompleteReturning", "JobReturner", new { jobId = Model.JobId }))
        {
            <input type="submit" class="btn btn-primary" id="btnSubmit" value="Done Returning" />
            <input type="submit" class="btn btn-default" id="btnSubmitNotDone" name="continue" value="Save and Continue Returning Later" />
        }
    </div>
</div>

@foreach (var item in Model.Assets.Where(x => x.Kind != Mavo.Assets.Models.AssetKind.Serialized))
{
<div id="modal-return-@item.AssetId" data-asset-id="@item.AssetId" data-quantity-needed="@item.QuantityNeeded" class="modal-return-nonserialized modal hide" tabindex="-1">
    <div class="modal-header">
        <button type="button" class="close" data-dismiss="modal" aria-hidden="true">×</button>
        <h3>Return @item.Name</h3>
    </div>
    <form action="/JobReturner/ReturnNonSerialized" method="post" class="form-inline">
        <div class="modal-body">
            <div class="alert alert-error hide">
                <strong>There was a problem returning this asset.</strong>
            </div>
            <table class="table">
                <thead>
                    <tr>
                        <th>#</th>
                        <th>Item</th>
                        <th>Needed</th>
                    </tr>
                </thead>
                <tbody>
                    <tr>
                        <td>@item.MavoItemNumber</td>
                        <td>@item.Name</td>
                        <td class="quantity">@item.QuantityNeeded</td>
                    </tr>
                </tbody>
            </table>
            <label>
                Qty:
                <input type="text" class="form-control required quantity" name="quantity" style="width: 50px;" />
                <div class="btn-group">
                    <a href="#" class="btn btn-large btn-success increment" data-increment="10">+10</a>
                    <a href="#" class="btn btn-large btn-success increment" data-increment="1">+1</a>
                    <a href="#" class="btn btn-large btn-danger increment" data-increment="-1">-1</a>
                    <a href="#" class="btn btn-large btn-danger increment" data-increment="-10">-10</a>
                </div>
            </label>
        </div>
        <div class="modal-footer">
            <button class="btn" data-dismiss="modal" aria-hidden="true">Close</button>
            <button type="submit" class="btn btn-primary return">Return</button>
        </div>
    </form>
</div>
}