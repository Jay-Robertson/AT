@{
    ViewBag.Title = "Index";
}

@model Mavo.Assets.Models.ViewModel.PickAJobModel
@{
    ViewBag.Title = "Index";
    var unserializedAssets = Model.Assets.Where(x => x.Kind != Mavo.Assets.Models.AssetKind.Serialized).ToList();
    var serializedAssets = Model.Assets.Where(x => x.Kind == Mavo.Assets.Models.AssetKind.Serialized).ToList();
}
@section LeftNav
{
    @{Html.RenderPartial("_JobReturnerSidebar");}
}
@section scripts
{
    @if (!Model.ReturnStarted.HasValue)
    {
        <script type="text/javascript">
            $('#btnSubmit').hide();
            $('#startModal').modal({
                keyboard: true,
                show: false
            });
            $('#btnStartReturning').click(function () {
                $.post('/jobreturner/startreturning/@Model.JobId', function (timeStarted) {
                    $('#returnTime').html(timeStarted);
                    $('#returnTimeDiv').removeClass('hide');
                    $('#startModal').modal('hide');
                    $('.text-box').removeAttr('disabled');
                    $('.input-mini').removeAttr('disabled');
                    $('.input-mini').removeAttr('disabled');
                    $('.checkbox').removeAttr('disabled');
                    $('#btnSubmit').show();
                    $('#btnSubmitDisabled').hide();
                    $('#beginReturning').hide();
                });
            });
        </script>
    }
    else
    {
        <script type="text/javascript">
            $('#btnSubmitDisabled').hide();
        </script>
        
    }

}
@if (!Model.ReturnStarted.HasValue)
{
    <div class="well" id="beginReturning">
        <a href="#startModal" role="button" class="btn btn-large btn-primary" data-toggle="modal">Begin Returning</a>
    </div>
    <div id="startModal" class="modal show fade" tabindex="-1" role="dialog" aria-labelledby="myModalLabel" aria-hidden="true" data-show="true">
        <div class="modal-header">
            <h3 id="myModalLabel">Start Returning?</h3>
        </div>
        <div class="modal-body">
            <p>Would you like to start returning this job?</p>
        </div>
        <div class="modal-footer">
            <button id="btnStartReturning" class="btn btn-primary">Start Returning</button>
        </div>
    </div>
}
<div class="row-fluid">
    <div class="well">
        <h4>
            Job Details
            <a class="btn" href="#" onclick="window.print()"><i class="icon-print"></i>&nbsp;Print</a>
        </h4>
        <div class="row-fluid">
            <div class="span4">
                <span>Job Name:</span>
                <span class="label label-info">@Model.JobName</span>
            </div>
            <div class="span4">
                <span>Job Number:</span>
                <span class="label label-info">@Model.JobNumber</span>
            </div>
            <div class="span4">
                <span>Manager:</span>
                <span class="label label-info">@Model.Manager</span>
            </div>
        </div>
        <div class="row-fluid">
            <div class="span4">
                <span>Customer:</span>
                <span class="label label-info">@Model.Customer</span>
            </div>
            <div class="span4">
                <span>Job Site:</span>
                <span class="label label-info">@Model.JobSite</span>
            </div>
            <div class="span4">
                <span>Foreman:</span>
                <span class="label label-info">@Model.Foreman</span>
            </div>
        </div>
    </div>
</div>
@if (Model.ReturnStarted.HasValue)
{
    <div class="alert alert-info @(!Model.ReturnStarted.HasValue ? "hide" : "")" id="returnTimeDiv">
        <button type="button" class="close" data-dismiss="alert">&times;</button>
        <strong>Job Returning!</strong> This job started being returned up at <span id="returnTime">@(Model.ReturnStarted.HasValue ? Model.ReturnStarted.Value.ToString() : "")</span>
    </div>
}
@using (Html.BeginForm(MVC.JobReturner.Index(Model.JobId, null)))
{
    var index = 0;
    <div class="row-fluid">
        <h4>Assets</h4>
        <table class="table table-striped table-hover">
            <thead>
                <tr>
                    <th>Item</th>
                    <th>Name</th>
                    <th>Status</th>
                    <th>Damaged?</th>
                    <th></th>
                </tr>
            </thead>
            <tbody>
                @for (int i = 0; i < serializedAssets.Count(); i++)
                {
                    for (int y = 0; y < serializedAssets[i].QuantityNeeded; y++)
                    {
                    <tr>
                        <td>@serializedAssets[i].AssetItemId</td>
                        <td>@serializedAssets[i].Name</td>
                        <td>@serializedAssets[i].Status</td>
                        <th>
                            @Html.CheckBox("assets[" + i.ToString() + "].IsDamaged", false, new { disabled = !Model.ReturnStarted.HasValue, @class = "checkbox" })
                        </th>
                        <td>
                            <div class="input-prepend input-append">
                                <span class="add-on"><i class="icon-barcode"></i></span>
                                <input type="text" @(!Model.ReturnStarted.HasValue ? "disabled" : "") class="input text-box" name="assets[@(index)].Barcode" value="@serializedAssets[i].Barcode"/>
                            </div>
                            <input type="hidden" name="assets[@(index)].AssetId" value="@serializedAssets[i].AssetId" />
                            <input type="hidden" name="assets[@(index)].AssetItemId" value="@serializedAssets[i].AssetItemId" />
                            <input type="hidden" name="assets[@(index)].Name" value="@serializedAssets[i].Name" />
                            <input type="hidden" name="assets[@(index)].Status" value="@serializedAssets[i].Status" />
                            <input type="hidden" name="assets[@(index)].Id" value="@serializedAssets[i].Id" />
                            <input type="hidden" name="assets[@(index)].QuantityNeeded" value="@serializedAssets[i].QuantityNeeded" />
                        </td>

                    </tr>
                        index++;
                    }

                }
                @for (int i = 0; i < unserializedAssets.Count(); i++)
                {
                    <tr class="@(unserializedAssets[i].NotEnoughQuantity ? "warning" : "")">
                        <td>@unserializedAssets[i].Id</td>
                        <td>@unserializedAssets[i].Name</td>
                        <td>@unserializedAssets[i].Status</td>
                        <td></td>
                        <td>
                            <input type="number" class="input-mini" @(!Model.ReturnStarted.HasValue ? "disabled" : "") name="assets[@i].QuantityTaken" value="@unserializedAssets[i].QuantityNeeded"/><text>/</text>
                            @unserializedAssets[i].QuantityNeeded

                            <input type="hidden" name="assets[@index].AssetId" value="@unserializedAssets[i].AssetId" />
                            <input type="hidden" name="assets[@index].Name" value="@unserializedAssets[i].Name" />
                            <input type="hidden" name="assets[@index].Status" value="@unserializedAssets[i].Status" />
                            <input type="hidden" name="assets[@index].Id" value="@unserializedAssets[i].Id" />
                            <input type="hidden" name="assets[@index].QuantityNeeded" value="@unserializedAssets[i].QuantityNeeded" />
                        </td>
                    </tr>
                    index++;
                }
            </tbody>
        </table>
    </div>
    <div class="row-fluid">
        <div class="form-actions">
            <input type="submit" class="btn btn-primary" id="btnSubmit" />
            <span class="btn btn-primary disabled" id="btnSubmitDisabled">Submit</span>
        </div>
    </div>
}

